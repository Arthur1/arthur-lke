# yaml-language-server: $schema=https://raw.githubusercontent.com/open-telemetry/opentelemetry-helm-charts/main/charts/opentelemetry-collector/values.schema.json

mode: daemonset
image:
  repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-k8s

resources:
  limits:
    cpu: 100m
    memory: 200M

clusterRole:
  create: true
  annotations: {}
  name: my-opentelemetry-collector
  rules:
    - apiGroups: [""]
      resources: ["pods", "namespaces"]
      verbs: ["get", "watch", "list"]
    - apiGroups: ["apps"]
      resources: ["replicasets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions"]
      resources: ["replicasets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["nodes/stats"]
      verbs: ["get", "watch", "list"]
  clusterRoleBinding:
    annotations: {}
    name: "my-opentelemetry-collector"

extraEnvs:
  - name: MACKEREL_APIKEY
    valueFrom:
      secretKeyRef:
        name: mackerel-arthur-1
        key: apikey
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: K8S_NODE_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP

extraVolumes:
  - name: hostfs
    hostPath:
      path: /

extraVolumeMounts:
  - name: hostfs
    mountPath: /hostfs
    readOnly: true
    mountPropagation: HostToContainer

alternateConfig:
  extensions:
    health_check:
      endpoint: ${env:MY_POD_IP}:13133

  receivers:
    hostmetrics:
      collection_interval: 1m
      root_path: /hostfs
      scrapers:
        cpu:
        disk:
        filesystem:
          exclude_fs_types:
            match_type: strict
            fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
          exclude_mount_points:
            match_type: regexp
            mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
        load:
        memory:
        network:
    kubeletstats:
      collection_interval: 1m
      auth_type: serviceAccount
      endpoint: ${env:K8S_NODE_IP}:10250
      metrics:
        k8s.node.cpu.usage:
          enabled: true
        k8s.node.cpu.utilization:
          enabled: false
        k8s.pod.cpu.usage:
          enabled: true
        k8s.pod.cpu.utilization:
          enabled: false
        container.cpu.usage:
          enabled: true
        container.cpu.utilization:
          enabled: false
    otlp:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:4317
        http:
          endpoint: ${env:MY_POD_IP}:4318

  processors:
    batch:
      send_batch_size: 5000
      send_batch_max_size: 5000
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25
    resourcedetection:
      detectors: [system]
      system:
        hostname_sources: [os]
    k8sattributes:
      extract:
        metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
      filter:
        node_from_env_var: K8S_NODE_NAME
      passthrough: false
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
        - sources:
            - from: resource_attribute
              name: k8s.pod.uid
        - sources:
            - from: connection
    resource/service:
      attributes:
        - key: service.name
          value: worker-node
          action: upsert
        - key: service.namespace
          value: arthur-lke
          action: upsert

  exporters:
    otlp/mackerel:
      endpoint: otlp.mackerelio.com:4317
      compression: gzip
      headers:
        Mackerel-Api-Key: ${env:MACKEREL_APIKEY}
    debug:

  service:
    extensions:
      - health_check
    pipelines:
      metrics/host:
        receivers: [hostmetrics]
        processors: [memory_limiter, resourcedetection, resource/service, batch]
        exporters: [otlp/mackerel]
      metrics/k8s:
        receivers: [kubeletstats]
        processors: [memory_limiter, k8sattributes, resource/service, batch]
        exporters: [otlp/mackerel]
      traces:
        receivers: [otlp]
        processors: []
        exporters: [debug]
      logs:
        receivers: [otlp]
        processors: []
        exporters: [debug]

ports:
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false
